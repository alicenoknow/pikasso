
// Generated by peggy v. 1.2.0 (ts-pegjs plugin v. 0.1.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

export interface ICached {
  nextPos: number;
  result: any;
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { Program: peg$parseProgram };
  let peg$startRuleFunction: () => any = peg$parseProgram;

  const peg$c0 = function(instructions: any): any { return { type: "Program", value: instructions }; };
  const peg$c1 = function(instructions: any): any { return { 
  	type: "Instructions", 
      value: instructions,
   }; };
  const peg$c2 = /^[ \t\r\n]/;
  const peg$c3 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false);
  const peg$c4 = "#";
  const peg$c5 = peg$literalExpectation("#", false);
  const peg$c6 = ".";
  const peg$c7 = peg$literalExpectation(".", false);
  const peg$c8 = "for";
  const peg$c9 = peg$literalExpectation("for", false);
  const peg$c10 = "in";
  const peg$c11 = peg$literalExpectation("in", false);
  const peg$c12 = "while";
  const peg$c13 = peg$literalExpectation("while", false);
  const peg$c14 = "true";
  const peg$c15 = peg$literalExpectation("true", false);
  const peg$c16 = "false";
  const peg$c17 = peg$literalExpectation("false", false);
  const peg$c18 = "border";
  const peg$c19 = peg$literalExpectation("border", false);
  const peg$c20 = "draw";
  const peg$c21 = peg$literalExpectation("draw", false);
  const peg$c22 = "fill";
  const peg$c23 = peg$literalExpectation("fill", false);
  const peg$c24 = "line";
  const peg$c25 = peg$literalExpectation("line", false);
  const peg$c26 = "circle";
  const peg$c27 = peg$literalExpectation("circle", false);
  const peg$c28 = "rect";
  const peg$c29 = peg$literalExpectation("rect", false);
  const peg$c30 = "{";
  const peg$c31 = peg$literalExpectation("{", false);
  const peg$c32 = "}";
  const peg$c33 = peg$literalExpectation("}", false);
  const peg$c34 = function(test: any, body: any): any { 
    return { 
    	type: "WhileLoop", 
      test, 
      body,
    }; };
  const peg$c35 = function(iterator: any, from: any, to: any, body: any): any {
        return {
          type: "ForLoop",
          iterator,
          from,
          to,
          body,
        };
      };
  const peg$c36 = "=";
  const peg$c37 = peg$literalExpectation("=", false);
  const peg$c38 = function(name: any, value: any): any { 
    return {
          type: "AssignmentStatement",
          key: name,
          value,
    	   };};
  const peg$c39 = function(r: any, g: any, b: any): any { return {
          type: "Color",
          r,
          g,
          b,
        };};
  const peg$c40 = function(borderDef: any): any { return {
          type: "BorderStatement",
          value: borderDef,
        };};
  const peg$c41 = function(color: any, width: any): any { return {
          type: "BorderDefinition",
          color,
          width,
        };};
  const peg$c42 = function(color: any): any { return {
          type: "FillStatement",
          color,
        };};
  const peg$c43 = function(object: any): any { return {
          type: "DrawStatement",
          object,
        };};
  const peg$c44 = function(x: any, y: any, r: any): any { return {
          type: "CircleDefinition",
          x: x,
          y: y,
          r: r,
        };};
  const peg$c45 = function(x1: any, y1: any, x2: any, y2: any): any { return {
          type: "LineDefinition",
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2,
        };};
  const peg$c46 = function(x: any, y: any, w: any, h: any): any { return {
          type: "RectDefinition",
          x: x,
          y: y,
          w: w,
          h: h,
        };};
  const peg$c47 = function(def: any): any { return { type: "Circle", value: def }; };
  const peg$c48 = function(def: any): any { return { type: "Line", value: def }; };
  const peg$c49 = function(def: any): any { return { type: "Rect", value: def }; };
  const peg$c50 = function(): any { return { type: "Boolean", value: true }; };
  const peg$c51 = function(): any { return { type: "Boolean", value: false }; };
  const peg$c52 = /^[a-zA-Z]/;
  const peg$c53 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  const peg$c54 = function(name: any): any { return { type: "Identifier", name: name.join('') }; };
  const peg$c55 = "+";
  const peg$c56 = peg$literalExpectation("+", false);
  const peg$c57 = function(left: any, right: any): any { return { type: "Addition", left, right } };
  const peg$c58 = "-";
  const peg$c59 = peg$literalExpectation("-", false);
  const peg$c60 = function(left: any, right: any): any { return { type: "Subtraction", left, right } };
  const peg$c61 = "*";
  const peg$c62 = peg$literalExpectation("*", false);
  const peg$c63 = function(left: any, right: any): any { return  { type: "Multiplication", left, right }; };
  const peg$c64 = "/";
  const peg$c65 = peg$literalExpectation("/", false);
  const peg$c66 = function(left: any, right: any): any { return  { type: "Division", left, right }; };
  const peg$c67 = /^[0-9]/;
  const peg$c68 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c69 = function(digits: any): any { return { type: "Integer", value: parseInt(digits.join(""), 10) }; };
  const peg$c70 = function(digits: any): any { return { type: "Integer", value: -parseInt(digits.join(""), 10) }; };
  const peg$c71 = "||";
  const peg$c72 = peg$literalExpectation("||", false);
  const peg$c73 = function(left: any, right: any): any { return { type: "Or", left, right }; };
  const peg$c74 = "&&";
  const peg$c75 = peg$literalExpectation("&&", false);
  const peg$c76 = function(left: any, right: any): any { return { type: "And", left, right }; };
  const peg$c77 = "!";
  const peg$c78 = peg$literalExpectation("!", false);
  const peg$c79 = function(value: any): any { return { type: "Not", value }; };
  const peg$c80 = ">";
  const peg$c81 = peg$literalExpectation(">", false);
  const peg$c82 = function(left: any, right: any): any { return { type: "Greater", left, right }; };
  const peg$c83 = "<";
  const peg$c84 = peg$literalExpectation("<", false);
  const peg$c85 = function(left: any, right: any): any { return { type: "Less", left, right }; };
  const peg$c86 = ">=";
  const peg$c87 = peg$literalExpectation(">=", false);
  const peg$c88 = function(left: any, right: any): any { return { type: "GreaterEqual", left, right }; };
  const peg$c89 = "<=";
  const peg$c90 = peg$literalExpectation("<=", false);
  const peg$c91 = function(left: any, right: any): any { return { type: "LessEqual", left, right }; };
  const peg$c92 = "==";
  const peg$c93 = peg$literalExpectation("==", false);
  const peg$c94 = function(left: any, right: any): any { return { type: "Equal", left, right }; };
  const peg$c95 = "!=";
  const peg$c96 = peg$literalExpectation("!=", false);
  const peg$c97 = function(left: any, right: any): any { return { type: "NotEqual", left, right }; };

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  const peg$resultsCache: {[id: number]: ICached} = {};

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseProgram(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 0;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseInstructions();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInstructions(): any {
    let s0, s1, s2;

    const key = peg$currPos * 42 + 1;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseInstruction();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseInstruction();
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInstruction(): any {
    let s0;

    const key = peg$currPos * 42 + 2;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseForLoop();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseWhileLoop();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseBorderStatement();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseFillStatement();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseDrawStatement();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parseAssignmentStatement();
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse__(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 3;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    s1 = peg$parseWhitespace();
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhitespace();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseWhitespace(): any {
    let s0;

    const key = peg$currPos * 42 + 4;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseVariableKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 5;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 35) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEOL(): any {
    let s0, s1, s2;

    const key = peg$currPos * 42 + 6;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseForKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 7;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 3) === peg$c8) {
      s0 = peg$c8;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 8;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 2) === peg$c10) {
      s0 = peg$c10;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseWhileKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 9;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 5) === peg$c12) {
      s0 = peg$c12;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseTrueKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 10;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 4) === peg$c14) {
      s0 = peg$c14;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFalseKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 11;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 5) === peg$c16) {
      s0 = peg$c16;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBorderKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 12;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 6) === peg$c18) {
      s0 = peg$c18;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDrawKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 13;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 4) === peg$c20) {
      s0 = peg$c20;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFillKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 14;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 4) === peg$c22) {
      s0 = peg$c22;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLineObjectKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 15;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 4) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCircleObjectKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 16;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 6) === peg$c26) {
      s0 = peg$c26;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRectObjectKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 17;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 4) === peg$c28) {
      s0 = peg$c28;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseWhileLoop(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    const key = peg$currPos * 42 + 18;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseWhileKeyword();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAndStatement();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c30;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseInstructions();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s9 = peg$c32;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c33); }
                    }
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parse__();
                      if (s10 as any !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c34(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseForLoop(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    const key = peg$currPos * 42 + 19;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseForKeyword();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseInKeyword();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseAddStatement();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseAddStatement();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parse__();
                      if (s10 as any !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 123) {
                          s11 = peg$c30;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c31); }
                        }
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parse__();
                          if (s12 as any !== peg$FAILED) {
                            s13 = peg$parseInstructions();
                            if (s13 as any !== peg$FAILED) {
                              s14 = peg$parse__();
                              if (s14 as any !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                  s15 = peg$c32;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c33); }
                                }
                                if (s15 as any !== peg$FAILED) {
                                  s16 = peg$parse__();
                                  if (s16 as any !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c35(s3, s7, s9, s13);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAssignmentStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 42 + 20;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAddStatement();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseEOL();
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c38(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseColorStatement(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 21;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAddStatement();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAddStatement();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAddStatement();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c39(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBorderStatement(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 22;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBorderKeyword();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseBorderDefinition();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseEOL();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c40(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBorderDefinition(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 42 + 23;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseColorStatement();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAddStatement();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c41(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFillStatement(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 24;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseFillKeyword();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseColorStatement();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseEOL();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c42(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDrawStatement(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 25;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseDrawKeyword();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseObjectDefinition();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseEOL();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c43(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCircleDefinition(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 42 + 26;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCircleObjectKeyword();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAddStatement();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAddStatement();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseAddStatement();
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c44(s3, s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLineDefinition(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 42 + 27;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseLineObjectKeyword();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAddStatement();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAddStatement();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseAddStatement();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseAddStatement();
                    if (s9 as any !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c45(s3, s5, s7, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRectDefinition(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 42 + 28;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseRectObjectKeyword();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAddStatement();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAddStatement();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseAddStatement();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseAddStatement();
                    if (s9 as any !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c46(s3, s5, s7, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseObjectDefinition(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 29;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCircleDefinition();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c47(s1);
    }
    s0 = s1;
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLineDefinition();
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48(s1);
      }
      s0 = s1;
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRectDefinition();
        if (s1 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c49(s1);
        }
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBooleanLiteral(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 30;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseTrueKeyword();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c50();
    }
    s0 = s1;
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFalseKeyword();
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51();
      }
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseKeyword(): any {
    let s0;

    const key = peg$currPos * 42 + 31;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseDrawKeyword();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseFillKeyword();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseCircleObjectKeyword();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseRectObjectKeyword();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseLineObjectKeyword();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parseBorderKeyword();
              if (s0 as any === peg$FAILED) {
                s0 = peg$parseForKeyword();
                if (s0 as any === peg$FAILED) {
                  s0 = peg$parseInKeyword();
                  if (s0 as any === peg$FAILED) {
                    s0 = peg$parseWhileKeyword();
                    if (s0 as any === peg$FAILED) {
                      s0 = peg$parseTrueKeyword();
                      if (s0 as any === peg$FAILED) {
                        s0 = peg$parseFalseKeyword();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseReservedWord(): any {
    let s0;

    const key = peg$currPos * 42 + 32;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseKeyword();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseBooleanLiteral();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIdentifier(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 42 + 33;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReservedWord();
    peg$silentFails--;
    if (s2 as any === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c54(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAddStatement(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 34;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseMulStatement();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s3 = peg$c55;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAddStatement();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c57(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMulStatement();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c58;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c59); }
          }
          if (s3 as any !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parseAddStatement();
              if (s5 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c60(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseMulStatement();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMulStatement(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 35;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBaseStatement();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s3 = peg$c61;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c62); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseMulStatement();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c63(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBaseStatement();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c64;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s3 as any !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parseMulStatement();
              if (s5 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c66(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseBaseStatement();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBaseStatement(): any {
    let s0;

    const key = peg$currPos * 42 + 36;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseInteger();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseIdentifier();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInteger(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 42 + 37;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$c67.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c67.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c69(s1);
    }
    s0 = s1;
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c58;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 as any !== peg$FAILED) {
        s2 = [];
        if (peg$c67.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s3 as any !== peg$FAILED) {
          while (s3 as any !== peg$FAILED) {
            s2.push(s3);
            if (peg$c67.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseOrStatement(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 38;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseLogicalExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c71) {
          s3 = peg$c71;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseOrStatement();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c73(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseLogicalExpression();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAndStatement(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 39;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseOrStatement();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c74) {
          s3 = peg$c74;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAndStatement();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c76(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseOrStatement();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLogicalExpression(): any {
    let s0, s1, s2;

    const key = peg$currPos * 42 + 40;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c77;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseLogicalExpression();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c79(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseRelationStatement();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseBooleanLiteral();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRelationStatement(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 41;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAddStatement();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s3 = peg$c80;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAddStatement();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c82(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseAddStatement();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s3 = peg$c83;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s3 as any !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parseAddStatement();
              if (s5 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c85(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAddStatement();
        if (s1 as any !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 as any !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c86) {
              s3 = peg$c86;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c87); }
            }
            if (s3 as any !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 as any !== peg$FAILED) {
                s5 = peg$parseAddStatement();
                if (s5 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c88(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 as any === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseAddStatement();
          if (s1 as any !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 as any !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c89) {
                s3 = peg$c89;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c90); }
              }
              if (s3 as any !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 as any !== peg$FAILED) {
                  s5 = peg$parseAddStatement();
                  if (s5 as any !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c91(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 as any === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseAddStatement();
            if (s1 as any !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 as any !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c92) {
                  s3 = peg$c92;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
                }
                if (s3 as any !== peg$FAILED) {
                  s4 = peg$parse__();
                  if (s4 as any !== peg$FAILED) {
                    s5 = peg$parseAddStatement();
                    if (s5 as any !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c94(s1, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 as any === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseAddStatement();
              if (s1 as any !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 as any !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c95) {
                    s3 = peg$c95;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c96); }
                  }
                  if (s3 as any !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 as any !== peg$FAILED) {
                      s5 = peg$parseAddStatement();
                      if (s5 as any !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c97(s1, s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

